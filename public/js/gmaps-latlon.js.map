{"version":3,"sources":["gmaps-latlon.js"],"names":[],"mappingsfile":"gmaps-latlon.js","sourcesContent":["/**\n *\n * A JQUERY GOOGLE MAPS LATITUDE AND LONGITUDE LOCATION PICKER\n * version 1.2\n *\n * Supports multiple maps. Works on touchscreen. Easy to customize markup and CSS.\n *\n * To see a live demo, go to:\n * http://www.wimagguc.com/projects/jquery-latitude-longitude-picker-gmaps/\n *\n * by Richard Dancsi\n * http://www.wimagguc.com/\n *\n */\n\n(function($) {\n\n// for ie9 doesn't support debug console >>>\nif (!window.console) window.console = {};\nif (!window.console.log) window.console.log = function () { };\n// ^^^\n\n$.fn.gMapsLatLonPicker = (function() {\n\n\tvar _self = this;\n\n\t///////////////////////////////////////////////////////////////////////////////////////////////\n\t// PARAMETERS (MODIFY THIS PART) //////////////////////////////////////////////////////////////\n\t_self.params = {\n\t\tdefLat : 0,\n\t\tdefLng : 0,\n\t\tdefZoom : 1,\n\t\tqueryLocationNameWhenLatLngChanges: true,\n\t\tqueryElevationWhenLatLngChanges: true,\n\t\tmapOptions : {\n\t\t\tmapTypeId: google.maps.MapTypeId.ROADMAP,\n\t\t\tmapTypeControl: false,\n\t\t\tdisableDoubleClickZoom: true,\n\t\t\tzoomControlOptions: true,\n\t\t\tstreetViewControl: false\n\t\t},\n\t\tstrings : {\n\t\t\tmarkerText : \"Drag this Marker\",\n\t\t\terror_empty_field : \"Couldn't find coordinates for this place\",\n\t\t\terror_no_results : \"Couldn't find coordinates for this place\"\n\t\t}\n\t};\n\n\n\t///////////////////////////////////////////////////////////////////////////////////////////////\n\t// VARIABLES USED BY THE FUNCTION (DON'T MODIFY THIS PART) ////////////////////////////////////\n\t_self.vars = {\n\t\tID : null,\n\t\tLATLNG : null,\n\t\tmap : null,\n\t\tmarker : null,\n\t\tgeocoder : null\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////////////////////////\n\t// PRIVATE FUNCTIONS FOR MANIPULATING DATA ////////////////////////////////////////////////////\n\tvar setPosition = function(position) {\n\t\t_self.vars.marker.setPosition(position);\n\t\t_self.vars.map.panTo(position);\n\n\t\t$(_self.vars.cssID + \".gllpZoom\").val( _self.vars.map.getZoom() );\n\t\t$(_self.vars.cssID + \".gllpLongitude\").val( position.lng() );\n\t\t$(_self.vars.cssID + \".gllpLatitude\").val( position.lat() );\n\n\t\t$(_self.vars.cssID).trigger(\"location_changed\", $(_self.vars.cssID));\n\n\t\tif (_self.params.queryLocationNameWhenLatLngChanges) {\n\t\t\tgetLocationName(position);\n\t\t}\n\t\tif (_self.params.queryElevationWhenLatLngChanges) {\n\t\t\tgetElevation(position);\n\t\t}\n\t};\n\n\t// for reverse geocoding\n\tvar getLocationName = function(position) {\n\t\tvar latlng = new google.maps.LatLng(position.lat(), position.lng());\n\t\t_self.vars.geocoder.geocode({'latLng': latlng}, function(results, status) {\n\t\t\tif (status == google.maps.GeocoderStatus.OK && results[1]) {\n\t\t\t\t$(_self.vars.cssID + \".gllpLocationName\").val(results[1].formatted_address);\n\t\t\t} else {\n\t\t\t\t$(_self.vars.cssID + \".gllpLocationName\").val(\"\");\n\t\t\t}\n\t\t\t$(_self.vars.cssID).trigger(\"location_name_changed\", $(_self.vars.cssID));\n\t\t});\n\t};\n\n\t// for getting the elevation value for a position\n\tvar getElevation = function(position) {\n\t\tvar latlng = new google.maps.LatLng(position.lat(), position.lng());\n\n\t\tvar locations = [latlng];\n\n\t\tvar positionalRequest = { 'locations': locations };\n\n\t\t_self.vars.elevator.getElevationForLocations(positionalRequest, function(results, status) {\n\t\t\tif (status == google.maps.ElevationStatus.OK) {\n\t\t\t\tif (results[0]) {\n\t\t\t\t\t$(_self.vars.cssID + \".gllpElevation\").val( results[0].elevation.toFixed(3));\n\t\t\t\t} else {\n\t\t\t\t\t$(_self.vars.cssID + \".gllpElevation\").val(\"\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$(_self.vars.cssID + \".gllpElevation\").val(\"\");\n\t\t\t}\n\t\t\t$(_self.vars.cssID).trigger(\"elevation_changed\", $(_self.vars.cssID));\n\t\t});\n\t};\n\n\t// search function\n\tvar performSearch = function(string, silent) {\n\t\tif (string == \"\") {\n\t\t\tif (!silent) {\n\t\t\t\tdisplayError( _self.params.strings.error_empty_field );\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\t_self.vars.geocoder.geocode(\n\t\t\t{\"address\": string},\n\t\t\tfunction(results, status) {\n\t\t\t\tif (status == google.maps.GeocoderStatus.OK) {\n\t\t\t\t\t$(_self.vars.cssID + \".gllpZoom\").val(11);\n\t\t\t\t\t_self.vars.map.setZoom( parseInt($(_self.vars.cssID + \".gllpZoom\").val()) );\n\t\t\t\t\tsetPosition( results[0].geometry.location );\n\t\t\t\t} else {\n\t\t\t\t\tif (!silent) {\n\t\t\t\t\t\tdisplayError( _self.params.strings.error_no_results );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t};\n\n\t// error function\n\tvar displayError = function(message) {\n\t\talert(message);\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////////////////////////\n\t// PUBLIC FUNCTIONS  //////////////////////////////////////////////////////////////////////////\n\tvar publicfunc = {\n\n\t\t// INITIALIZE MAP ON DIV //////////////////////////////////////////////////////////////////\n\t\tinit : function(object) {\n\n\t\t\tif ( !$(object).attr(\"id\") ) {\n\t\t\t\tif ( $(object).attr(\"name\") ) {\n\t\t\t\t\t$(object).attr(\"id\", $(object).attr(\"name\") );\n\t\t\t\t} else {\n\t\t\t\t\t$(object).attr(\"id\", \"_MAP_\" + Math.ceil(Math.random() * 10000) );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_self.vars.ID = $(object).attr(\"id\");\n\t\t\t_self.vars.cssID = \"#\" + _self.vars.ID + \" \";\n\n\t\t\t_self.params.defLat  = $(_self.vars.cssID + \".gllpLatitude\").val()  ? $(_self.vars.cssID + \".gllpLatitude\").val()\t\t: _self.params.defLat;\n\t\t\t_self.params.defLng  = $(_self.vars.cssID + \".gllpLongitude\").val() ? $(_self.vars.cssID + \".gllpLongitude\").val()\t    : _self.params.defLng;\n\t\t\t_self.params.defZoom = $(_self.vars.cssID + \".gllpZoom\").val()      ? parseInt($(_self.vars.cssID + \".gllpZoom\").val()) : _self.params.defZoom;\n\n\t\t\t_self.vars.LATLNG = new google.maps.LatLng(_self.params.defLat, _self.params.defLng);\n\n\t\t\t_self.vars.MAPOPTIONS\t\t = _self.params.mapOptions;\n\t\t\t_self.vars.MAPOPTIONS.zoom   = _self.params.defZoom;\n\t\t\t_self.vars.MAPOPTIONS.center = _self.vars.LATLNG;\n\n\t\t\t_self.vars.map = new google.maps.Map($(_self.vars.cssID + \".gllpMap\").get(0), _self.vars.MAPOPTIONS);\n\t\t\t_self.vars.geocoder = new google.maps.Geocoder();\n\t\t\t_self.vars.elevator = new google.maps.ElevationService();\n\n\t\t\t_self.vars.marker = new google.maps.Marker({\n\t\t\t\tposition: _self.vars.LATLNG,\n\t\t\t\tmap: _self.vars.map,\n\t\t\t\ttitle: _self.params.strings.markerText,\n\t\t\t\tdraggable: true\n\t\t\t});\n\n\t\t\t// Set position on doubleclick\n\t\t\tgoogle.maps.event.addListener(_self.vars.map, 'dblclick', function(event) {\n\t\t\t\tsetPosition(event.latLng);\n\t\t\t});\n\n\t\t\t// Set position on marker move\n\t\t\tgoogle.maps.event.addListener(_self.vars.marker, 'dragend', function(event) {\n\t\t\t\tsetPosition(_self.vars.marker.position);\n\t\t\t});\n\n\t\t\t// Set zoom feld's value when user changes zoom on the map\n\t\t\tgoogle.maps.event.addListener(_self.vars.map, 'zoom_changed', function(event) {\n\t\t\t\t$(_self.vars.cssID + \".gllpZoom\").val( _self.vars.map.getZoom() );\n\t\t\t\t$(_self.vars.cssID).trigger(\"location_changed\", $(_self.vars.cssID));\n\t\t\t});\n\n\t\t\t// Update location and zoom values based on input field's value\n\t\t\t$(_self.vars.cssID + \".gllpUpdateButton\").bind(\"click\", function() {\n\t\t\t\tvar lat = $(_self.vars.cssID + \".gllpLatitude\").val();\n\t\t\t\tvar lng = $(_self.vars.cssID + \".gllpLongitude\").val();\n\t\t\t\tvar latlng = new google.maps.LatLng(lat, lng);\n\t\t\t\t_self.vars.map.setZoom( parseInt( $(_self.vars.cssID + \".gllpZoom\").val() ) );\n\t\t\t\tsetPosition(latlng);\n\t\t\t});\n\n\t\t\t// Search function by search button\n\t\t\t$(_self.vars.cssID + \".gllpSearchButton\").bind(\"click\", function() {\n\t\t\t\tperformSearch( $(_self.vars.cssID + \".gllpSearchField\").val(), false );\n\t\t\t});\n\n\t\t\t// Search function by gllp_perform_search listener\n\t\t\t$(document).bind(\"gllp_perform_search\", function(event, object) {\n\t\t\t\tperformSearch( $(object).attr('string'), true );\n\t\t\t});\n\n\t\t\t// Zoom function triggered by gllp_perform_zoom listener\n\t\t\t$(document).bind(\"gllp_update_fields\", function(event) {\n\t\t\t\tvar lat = $(_self.vars.cssID + \".gllpLatitude\").val();\n\t\t\t\tvar lng = $(_self.vars.cssID + \".gllpLongitude\").val();\n\t\t\t\tvar latlng = new google.maps.LatLng(lat, lng);\n\t\t\t\t_self.vars.map.setZoom( parseInt( $(_self.vars.cssID + \".gllpZoom\").val() ) );\n\t\t\t\tsetPosition(latlng);\n\t\t\t});\n\t\t}\n\n\t}\n\n\treturn publicfunc;\n});\n\n}(jQuery));\n\n$(document).ready( function() {\n\t$(\".gllpLatlonPicker\").each(function() {\n\t\t$(document).gMapsLatLonPicker().init( $(this) );\n\t});\n});\n\n$(document).bind(\"location_changed\", function(event, object) {\n\tconsole.log(\"changed: \" + $(object).attr('id') );\n});\n"],"sourceRoot":"/source/"}